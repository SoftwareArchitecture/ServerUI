package at.ac.tuwien.softwareArchitecture.SWAzam.view;

import java.util.List;

import at.ac.tuwien.softwarearchitecture.swazam.common.infos.Account;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

public class DeleteView extends CustomComponent implements View, Button.ClickListener{

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	JerseyClient jc = new JerseyClient();
	public static final String NAME = "delete";
	
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private VerticalLayout verticalLayout_1;
	@AutoGenerated
	private Button button_1;
	private Button button_2;
	@AutoGenerated
	private Table table_1;
	@AutoGenerated
	private Label label_1;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public DeleteView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// verticalLayout_1
		verticalLayout_1 = buildVerticalLayout_1();
		mainLayout.addComponent(verticalLayout_1, "top:40.0px;left:100.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_1() {
		// common part: create layout
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("300px");
		verticalLayout_1.setHeight("100.0%");
		verticalLayout_1.setMargin(false);
		
		// label_1
		label_1 = new Label();
		label_1.setImmediate(false);
		label_1.setWidth("-1px");
		label_1.setHeight("-1px");
		label_1.setValue("Delete User");
		verticalLayout_1.addComponent(label_1);
		
		// table_1
		table_1 = new Table();
		table_1.setWidth("100.0%");
		table_1.setHeight("-1px");
		// Allow selecting items from the table.
		table_1.setSelectable(true);

		// Send changes in selection immediately to server.
		table_1.setImmediate(true);
		table_1.addContainerProperty("id", Integer.class,  null);
		table_1.addContainerProperty("username", String.class,  null);
		table_1.addContainerProperty("First Name", String.class,  null);
		table_1.addContainerProperty("Last Name", String.class,  null);
		table_1.addContainerProperty("Coins", Integer.class,  null);
		
		verticalLayout_1.addComponent(table_1);
		
		
		// button_1
		button_1 = new Button("Delete User", this);
		button_1.setCaption("Delete User");
		button_1.setImmediate(false);
		button_1.setWidth("-1px");
		button_1.setHeight("-1px");
		verticalLayout_1.addComponent(button_1);
		
		button_2 = new Button("Back to Main", new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				getUI().getNavigator().navigateTo(MainView.NAME);
			}
		});
		verticalLayout_1.addComponent(button_2);
		return verticalLayout_1;
	}

	@Override
	public void enter(ViewChangeEvent event) {
		// TODO Auto-generated method stub
		computeTable();
		
		
	}

	private void computeTable() {
		table_1.removeAllItems();
		List<Account> accountlist = jc.list();
		for (Account account : accountlist) {
			table_1.addItem(new Object[] {
				    account.getId(),account.getUsername(),account.getFirstname(),account.getLastname(),account.getCoin()}, account.getId());
		}
	}

	@Override
	public void buttonClick(ClickEvent event) {
		// TODO Auto-generated method stub
		System.out.print(table_1.getValue());
		jc.deleteAccount(Integer.parseInt(table_1.getValue().toString()), getSession().getAttribute("sessionKey").toString());
		computeTable();
	}

}
